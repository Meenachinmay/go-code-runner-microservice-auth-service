// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/company_auth/v1/company_auth.proto

package companyauthpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyAuthServiceClient is the client API for CompanyAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyAuthServiceClient interface {
	// Register registers a new company
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Login authenticates a company and returns a token
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// GenerateAPIKey generates a new API key for a company
	GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...grpc.CallOption) (*GenerateAPIKeyResponse, error)
	// GenerateClientID generates a new client ID for a company
	GenerateClientID(ctx context.Context, in *GenerateClientIDRequest, opts ...grpc.CallOption) (*GenerateClientIDResponse, error)
}

type companyAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyAuthServiceClient(cc grpc.ClientConnInterface) CompanyAuthServiceClient {
	return &companyAuthServiceClient{cc}
}

func (c *companyAuthServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/company_auth.v1.CompanyAuthService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAuthServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/company_auth.v1.CompanyAuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAuthServiceClient) GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...grpc.CallOption) (*GenerateAPIKeyResponse, error) {
	out := new(GenerateAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/company_auth.v1.CompanyAuthService/GenerateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyAuthServiceClient) GenerateClientID(ctx context.Context, in *GenerateClientIDRequest, opts ...grpc.CallOption) (*GenerateClientIDResponse, error) {
	out := new(GenerateClientIDResponse)
	err := c.cc.Invoke(ctx, "/company_auth.v1.CompanyAuthService/GenerateClientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyAuthServiceServer is the server API for CompanyAuthService service.
// All implementations must embed UnimplementedCompanyAuthServiceServer
// for forward compatibility
type CompanyAuthServiceServer interface {
	// Register registers a new company
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Login authenticates a company and returns a token
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// GenerateAPIKey generates a new API key for a company
	GenerateAPIKey(context.Context, *GenerateAPIKeyRequest) (*GenerateAPIKeyResponse, error)
	// GenerateClientID generates a new client ID for a company
	GenerateClientID(context.Context, *GenerateClientIDRequest) (*GenerateClientIDResponse, error)
	mustEmbedUnimplementedCompanyAuthServiceServer()
}

// UnimplementedCompanyAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyAuthServiceServer struct {
}

func (UnimplementedCompanyAuthServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCompanyAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCompanyAuthServiceServer) GenerateAPIKey(context.Context, *GenerateAPIKeyRequest) (*GenerateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAPIKey not implemented")
}
func (UnimplementedCompanyAuthServiceServer) GenerateClientID(context.Context, *GenerateClientIDRequest) (*GenerateClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateClientID not implemented")
}
func (UnimplementedCompanyAuthServiceServer) mustEmbedUnimplementedCompanyAuthServiceServer() {}

// UnsafeCompanyAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyAuthServiceServer will
// result in compilation errors.
type UnsafeCompanyAuthServiceServer interface {
	mustEmbedUnimplementedCompanyAuthServiceServer()
}

func RegisterCompanyAuthServiceServer(s grpc.ServiceRegistrar, srv CompanyAuthServiceServer) {
	s.RegisterService(&CompanyAuthService_ServiceDesc, srv)
}

func _CompanyAuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_auth.v1.CompanyAuthService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_auth.v1.CompanyAuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAuthService_GenerateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAuthServiceServer).GenerateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_auth.v1.CompanyAuthService/GenerateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAuthServiceServer).GenerateAPIKey(ctx, req.(*GenerateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyAuthService_GenerateClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyAuthServiceServer).GenerateClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_auth.v1.CompanyAuthService/GenerateClientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyAuthServiceServer).GenerateClientID(ctx, req.(*GenerateClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyAuthService_ServiceDesc is the grpc.ServiceDesc for CompanyAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company_auth.v1.CompanyAuthService",
	HandlerType: (*CompanyAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _CompanyAuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CompanyAuthService_Login_Handler,
		},
		{
			MethodName: "GenerateAPIKey",
			Handler:    _CompanyAuthService_GenerateAPIKey_Handler,
		},
		{
			MethodName: "GenerateClientID",
			Handler:    _CompanyAuthService_GenerateClientID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/company_auth/v1/company_auth.proto",
}
